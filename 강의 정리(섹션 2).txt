섹션 2

4. 소켓 프로그래밍 입문 #2
- DummyClient와 ServerCore이 함께 시작되도록 한다.
- IP 주소를 바로 넣으면 IP 주소는 변경될 가능성이 있기 때문에 도메인을 통해 IP를 찾게끔 해야 한다.
- Listen() 안에 인자는 최대 대기수
- Accept()를 통해 클라이언트와 연결
- Receive()를 통해 클라이언트로부터 데이터를 받음
- Shutdown(SocketShutdown.Both)를 통해 연결이 끊어질 것이라는 걸 예고
- Accept(), Send() 등은 블로킹 함수로 이게 실행될 때까지 아래 명령은 실행되지 않는다.

5. Listener
- 게임을 만들 때 블로킹 계열의 함수는 최대한 피해야 한다.
- Async 계열의 함수를 사용한다.
- _listenSocket.AccpetAsync(args)를 통해 비동기적으로 계속 연결 요청 확인
- 클라이언트가 접속할 경우 OnAcceptCompleted() 실행

6. Session #1
- AsyncEventArgs를 넣어준 경우 콜백 함수는 자동으로 별도의 쓰레드에서 실행 => 멀티 쓰레드 환경 주의!

7. Session #2
- 네트워크 송수신에서 성능 문제가 많이 발생
- sendArgs 재사용하도록 refactor

8. Session #3
- SetBuffer: 하나씩 / BufferList: 한 번에 전송 => 동시에 사용하면 에러 발생
- 패킷이 동시다발적으로 올 때 패킷을 모아 한 번에 보낼 수 있도록 refactor
- 실제로는 일정한 짧은 시간 동안 몇 byte를 보냈는지 추적하여 많이 보내면 쉬면서 데이터를 보내는 게 더 좋다. ex. 디도스 방어
- 패킷들을 최대한 모아 보내는 것을 서버 엔진에서 할 건지 컨텐츠에서 할 건지 생각해봐야 한다.

9. Session #4
- 이벤트를 받는 방법
  - Handler를 만들어서 연결
  - Session을 상속 => 이 방식으로 Refactor
- Listener 내에서 GameSession을 만드는 방식은 나중에 이게 다른 Session이 될 수도 있다는 것을 고려하지 못하는 것이므로 sessionFactory라는 함수를 통해 컨텐츠 단에서 어떤 종류의 Session을 만들 것인지 전달한다.

10. Connector
- socket은 user token을 통해 넘긴다. => 커넥터를 여러 명을 받을 수 있기 때문에 변수를 통한 방법이 아닌 이벤트를 통해서 인자를 넘긴다.
- 처음 상태로는 클라이언트에서 새로 만든 Connector를 사용할 수 없다. => 서버 코어는 라이브러리로만 사용할 계획이었으므로 라이브러리로 변경
  - 서버 코어 => 속성 => 출력 형식: 클래스 라이브러리
  - 클라이언트 => 추가 => 참조 => 서버 코어

12. RecvBuffer
- readPos, writePos를 통해 받은 데이터를 읽을 offset과 저장할 offset 분리

13. SendBuffer
- session 내부에 send buffer를 두면 보내는 횟수만큼 복사를 해야 한다는 문제 발생
- Thread끼리의 경합을 없애기 위해 ThreadLocal로 sendBuffer 생성

14.PacketSession
- 패킷에서 네트워크 상으로 송/수신 하는 부분은 메모리를 최대한 압축해서 줄이는 게 중요
- 보통 패킷 설계는 int 대신 ushort 자료형으로 패킷의 첫 인자에 패킷의 사이즈를 적어주고 그 다음으로 ushort 패킷 아이디, 그 후 데이터를 적어준다.
- sealed:이 키워드를 사용하면 다른 클래스가 이 키워드가 포함된 클래스를 상속받은 후 이 키워드가 붙은 함수를 오버라이드 하면 에러가 발생한다. 즉, 상속 받는 클래스는 sealed가 붙은 인터페이스가 아닌 별도의 인터페이스를 받도록 바꿔치기 한다.