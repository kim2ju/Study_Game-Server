섹션 0

3. 환경 설정
- 콘솔 앱 만들기(Server)
- 솔루션 우클릭 -> 추가 -> 새 프로젝트(ServerCore, DummyClient)
- DummyClient: 유니티 연동을 하지 않고 테스트할 때 클라이언트 역할
- Server: 실제로 올릴 서버
- ServerCore: 필요한 핵심 기능들
- 솔루션 우클릭 -> 속성 -> 여러 개의 시작 프로젝트 설정: Ctrl+F5로 한 번에 여러 프로젝트 실행 가능


섹션 1

2. 쓰레드 생성
- thread가 많다고 좋은 게 아니다. CPU 코어 수와 최대한 맞춰주는 게 중요하다.
- 기본적으로 foreground에서 실행되는 thread로 만들어진다. 
- t.IsBackground = true; => 메인이 종료되면 이 thread가 실행되든 말든 그냥 종료된다.
- t.Join(); => thread가 종료될 때까지 기다린다.
- t.Name = "name"; => thread의 이름을 설정한다.
- ThreadPool: thread의 대기 집합소. 
  - 장점: thread 생성 개수를 제한할 수 있다.
  - 단점: 최대 thread 개수만큼 작업 시간이 긴 걸 맡길 경우 먹통이 될 수 있다는 위험이 존재한다. => Task에서 TaskCreationOptions.LongRunning을 인자로 주어 해결할 수 있다.

3. 컴파일러 최적화
- thread 클래스의 join == task 클래스의 wait
- 실제로 배포할 때는 Release 모드로 동작하는데 이러면 온갖 최적화가 들어가서 디버깅하기 더 어려워진다. 코드가 같아도 Debug 모드에서와 다르게 동작할 수 있다.
- 변수 앞에 volatile을 붙이면 최적화를 하지 않는다.(중요 X, 더 나은 해결책 존재)

4. 캐시 이론
- 변수의 값을 바꿀 때 바로 실제로 메모리에다가 바꿔치기하는 게 아니라 캐시 장치에 입력했다가 나중에 한 번에 메모리에다가 올린다.
- 무엇을 기준으로 캐싱 할 것인가? 1) Temporal Locality 2) Spatial Locality
- 멀티 스레드 환경에서는 각자 자신만의 캐시가 따로 있기 때문에 상황이 복잡해진다.
- 실습의 결과를 보면 (x, y)가 2배의 시간이 걸린다. 이건 Spatial Locality 때문이다. (y, x)는 연속적으로 주변의 값을 가져와 캐시를 잘 활용하고 있지만 (x, y)는 멀리 떨어진 값을 가지고 오고 있어 캐시를 활용하지 못하고 있다.

5. 메모리 배리어
- 하드웨어에서도 최적화를 진행한다.
- 처음 실습에서 코드만 보면 r1, r2의 값이 0이 될 수가 없는데 0이 된다. 왜냐하면 서로 연관이 없어 보이는 명령이면 서로 순서를 바꿔 빠르게 실행되도록 하기 때문이다. 싱글 스레드에서는 문제가 없지만 멀티 스레드 환경이라 문제가 발생했다.
- 메모리 배리어(Thread.MemoryBarrier)? 1) 코드 재배치 억제 2) 가시성
  - 메모리 배리어를 사용하면 아래의 코드가 배리어보다 위로 재배치될 수가 없다.
  - Full Memory Barrier: Store/Load 둘 다 막는다.
  - Store Memory Barrier: Store만 막는다.
  - Load Memory Barrier: Load만 막는다.
  - 메모리 배리어를 사용하면 메모리 동기화 작업을 진행한다.(Volatile과 비슷)

6. Interlocked
- 경합 조건(Race Condition): 같은 자원에 동시에 액세스하여 처리할 때 스레드끼리 서로 차례를 지키지 않고 경합을 하여 예상한 결과와 달라지는 경우를 말한다.
- number++의 경우 실제로는 int temp = number; temp += 1; number = temp;라는 3단계에 거쳐 실행된다. 이렇게 되면 서로 다른 스레드에서 number++;와 number--;을 실행하여 기대하는 결과는 0인데 실제 결과는 1이나 -1이 나올 수 있다.
- Interlocked.Increment(ref number)
  - number++를 원자적으로 이뤄지게 해준다.
  - 성능에서 큰 손해를 본다.
  - 내부에서 메모리 배리어를 간접적으로 사용한다. => 가시성 문제 X => volatile 필요 X
  - 변경된 값을 반환한다. => 따로 int result = number;라고 값을 얻으려고 하면 이 number의 값은 계속 바뀌고 있기 때문에 기대한 값을 얻을 수 없다.

7. Lock 기초
- 임계 영역: 동시다발적으로 스레드들이 접근하면 문제가 되는 코드
- Monitor.Enter(_obj) Monitor.Exit(_obj) 사이에 있는 코드는 싱글 스레드처럼 작동한다. => Exit를 제대로 하지 않으면 접근하지 못하게 되어 deadlock이 발생할 수 있다.
- lock(_obj)를 사용하면 Exit를 하지 않아 deadlock이 발생하는 실수를 방지할 수 있다.

8. Deadlock
- 자원에 접근하기 위해 락 2개를 풀어야 하는데 서로 다른 스레드가 각자 락을 1개씩 풀고 다른 걸 기다리고 있는 경우에도 발생한다.

10. SpinLock
- 락이 풀릴 때까지 계속해서 기다린다.
- 락이 풀릴 때 동시에 락을 얻는 상황을 방지하기 위해 Interlocked를 사용한다.

11. Context Switching
- 락을 얻는 이외 방법:
  - 누가 락을 사용 중이면 다른 걸 하다가 랜덤으로 다시 락이 사용 중인지 확인한다.
  - 다른 관리자를 사용하여 락 사용이 끝나면 그다음으로 락이 필요한 것에게 알린다.
- Thread.Sleep, Thread.Yield: 상황에 따라 필요한 것을 선택한다.
  - Thread.Sleep(양수): 무조건 휴식 => 양수 ms 만큼 쉰다.
  - Thread.Sleep(0): 조건부 양보 => 자신보다 우선순위가 높거나 같은 스레드에게만 양보. 없으면 다시 자기 자신 실행
   - Thread.Yield(): 관대한 양보 => 지금 실행 가능한 스레드가 있으면 양보. 없으면 다시 자기 자신 실행
- Context Switching 시간은 오래 걸리기 때문에 오히려 계속 유저 모드에서 락 획득이 가능한지 확인하는 게 더 효율적일 수도 있다.

12. AutoResetEvent
- 커널 레벨에 있는 관리자를 사용하여 락을 획득하면 시간은 더 오래 걸리지만 스레드 입장에서만 보면 시간을 낭비하지 않고 무조건 락이 풀릴 때만 뒤의 동작을 이어간다는 장점이 있다. 
- AutoResetEvent: wait 후 자동으로 close 한다. => 더 적절하다. 가장 많이 사용.
- ManualResetEvent: wait와 close가 따로 동작한다. 
- Mutex: AutoResetEvent와 비슷하게 동작하나 추가적으로 몇 번을 잠갔는지 카운팅 하는 등 더 많은 정보를 기억하고 있다. => 조금 더 느리다.

13. ReaderWriterLock
- 특수한 경우에만 락이 동작한다.

14. ReaderWriterLock 구현 연습
